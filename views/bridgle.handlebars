<!--  bridgle -->
{{> loader}}
{{> report}}

<div id="header">
	<h1>Word Bridgle</h1>
	<button id="home-btn" class="big-btn bridgle" onclick={location.href="/"}>Home</button>	
</div>

<div id="bridgle">
	<div id="nodes">
		<div class="node" id="remove-first-node">
			<div class="word">
				{{start}} → {{end}}
			</div>
		</div>
	</div>

	<p id="synonym-instructions">Choose a synonym of {{start}}.  Click synonyms for definitions.</p>

	<div id="synonyms">
		{{#each startSynonyms}}
		<button class="word big-btn synonym" data-word="{{this}}" data-synonym="{{../start}}" onclick={B.getDef(this);}>
			{{this}}
		</button>
		{{/each}}
	</div>

	<div id="end-nodes">
		
	</div>

	
	<p id="game-instructions">Connect these two words using synonyms.  Press play to begin.</p>
	<button class="big-btn" id="play-button">Play</button>

	<div id="input">
		<button class="big-btn" id="select-button">Select</button>
		<button class="prev" id="prev-button">
			<img src="/img/mod-left-arrow.svg" alt="">
		</button>
		<button class="next" id="next-button">
			<img src="/img/mod-right-arrow.svg" alt="">
		</button>
	</div>
</div>

<script type="text/javascript">
	/* check hash to reroute */
	if (location.hash) {
		location.href = `${location.origin}/bridge?qs=${location.hash.replace('#', '')}`;
	}
	window.B = {}; // need B for helpers
	B.isBridgle = true;
</script>
<script src="/js/helpers.js"></script>
<script src="/js/bridge.js"></script>
<script src="/js/def.js"></script>
<script type="text/javascript">
	window.addEventListener('load', function() {
		const start = "{{{start}}}";
		const end = "{{{end}}}";
		const chain = [start];
		const matches = '{{{endSyonyms}}}'.split(',');

		const playButton = document.getElementById('play-button');
		playButton.addEventListener('click', startBridgle);

		const input = document.getElementById('input');
		const nodes = document.getElementById('nodes');
		const endNodes = document.getElementById('end-nodes');
		const synonyms = document.getElementById('synonyms');
		const choices = document.getElementsByClassName('synonym');
		
		const instructions = document.getElementById('synonym-instructions');

		const nextButton = document.getElementById('next-button');
		nextButton.addEventListener('click', next);

		const prevButton = document.getElementById('prev-button');
		prevButton.addEventListener('click', prev);

		const selectButton = document.getElementById('select-button');
		selectButton.addEventListener('click', select);

		let currentChoiceIndex = 0;


		function startBridgle() {
			// remove intro
			playButton.style.display = 'none';
			document.getElementById('game-instructions').style.display = 'none';
			document.getElementById('remove-first-node').remove();

			nodes.appendChild(addNode(start + ' → '));
			endNodes.appendChild(addNode('→ ' + end));

			input.style.display = 'flex';
			synonyms.style.display = 'flex';
			instructions.style.display = 'block';

			choices[currentChoiceIndex].classList.add('selected');
			selectButton.textContent = `select ${choices[0].dataset.word}`;
		}

		function next() {
			choices[currentChoiceIndex].classList.remove('selected');
			currentChoiceIndex++;
			if (currentChoiceIndex >= choices.length) currentChoiceIndex = 0;
			choices[currentChoiceIndex].classList.add('selected');
			selectButton.textContent = `select ${choices[currentChoiceIndex].dataset.word}`;
		}

		function prev() {
			choices[currentChoiceIndex].classList.remove('selected');
			currentChoiceIndex--;
			if (currentChoiceIndex < 0) currentChoiceIndex = choices.length - 1;;
			choices[currentChoiceIndex].classList.add('selected');
			selectButton.textContent = `select ${choices[currentChoiceIndex].dataset.word}`;
		}

		function select() {
			
			let selection = choices[currentChoiceIndex].dataset.word;
			
			// check if it is a match
			if (matches.includes(selection)) {
				console.log('you win!');
				return;
			}

			// get syns
			const url = `/bridgle-selection?word=${selection}&end=${end}&used=${chain}`;
			fetch(url)
				.then(response => { return response.json(); })
				.then(result => {
					console.log(result);

					chain.push(selection);
					nodes.appendChild(addSelection(selection + ' → '));
					// const title = `${word}`;
					// const sub = B.isBridgle ? '' : `synonym of “${synonym}”`;
					// let msg = "";
					// const len = Math.min(result.data.length, 10);
					// for (let i = 0; i < len; i++) {
					// 	msg += `<strong>${pos[result.data[i].pos]}</strong>`;
					// 	msg += '<br>';
					// 	msg += result.data[i].def;
					// 	msg += '<br><br>';
					// }
					// B.report(title, msg, sub);
				});

			// use chain to check if it's possible?


			synonyms.innerHTML = '';
		}

		function addSelection(text) {
			const node = B.createElem('div', ['node', 'selection']);
			const word = B.createElem('div', ['word'], text);
			node.appendChild(word);
			return node;
		}

		function addNode(text) {
			const node = B.createElem('div', ['node']);
			const word = B.createElem('div', ['word'], text);
			node.appendChild(word);
			return node;
		}
	});
</script>



